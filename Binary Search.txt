// Binary Search

/*
Problem statement:

You are given an integer array 'A' of size 'N', sorted in non-decreasing order. You are also given an integer 'target'. Your task is to write a function to search for 'target' in the array 'A'. If it exists, return its index in 0-based indexing. If 'target' is not present in the array 'A', return -1.


Note:
You must write an algorithm whose time complexity is O(LogN)


Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= N <= 10^5
1 <= A[i] <= 10^9
1 <= target <= 10^9
Time Limit: 1 sec
Sample Input 1:
7
1 3 7 9 11 12 45
3
Sample Output 1:
1
Explanation of sample output 1:
nums = [1, 3, 7, 9, 11, 12, 45],
The index of element '3' is 1.
Hence, the answer is '1'.


Sample Input 2:
7
1 2 3 4 5 6 7
9
Sample Output 2:
-1
Explanation of sample output 2:
nums = [1, 2, 3, 4, 5, 6, 7],
Element '9' doesn't exist.
Hence, the answer is '-1'.
*/

//CODE:

public class Solution {
    public static int search(int []nums, int target) {
        int left=0;
        int right=nums.length-1;
        while(left<=right){
            int mid=left+(right-left)/2;  //Calculate the middle index
            if(nums[mid]==target){
                return mid; //target found
            }else if(nums[mid]<target){
                left=mid+1;  //Search in the right half
            }else{
                right=mid-1; //Search in the left half
            }
        }
        return -1; //target not fund
    }

    public static void main(String[] args){
        //Test case
        int nums1[]={1,3,7,9,11,12,45};
        int target1=3;
        System.out.println(search(nums1, target1)); //output:1

        int nums2[]={1,2,3,4,5,6,7};
        int target2=9;
        System.out.println(search(nums2,target2)); //output:-1
    }
}